<?php
namespace app\api\controller;
use app\admin\model\User;
use think\Collection;
use app\admin\model\HomeCarousel;
use app\admin\model\Store;
use think\Db;
use app\admin\model\Campus;
use app\admin\model\GoodsPromotion;
use app\admin\model\Orders;
use app\admin\model\Coupon;
use think\Model;


class Home extends Collection{
    //获取轮播图
    public function getcarousel(){
        $campus_id = input('campus_id');
        

        if(!empty($campus_id)){
            $maps = [
                'deleted'=>0,
                'status'=>1,
                'campus_id'=>$campus_id,
            ];
        }
        else{
            $maps = [
                'deleted'=>0,
                'status'=>1,
                'campus_id'=>'',

            ];
        }
        $carousel = new HomeCarousel();
        $data   = $carousel
            ->where($maps)
            ->field('id carousel_id,jump_type,jump_url,picture')
            ->order('sort desc,id asc')
            ->select();

        if(empty($data)){
            return json(['code'=>204,'msg'=>'没有数据']);
        }
        else{
            return json(['code'=>200,'msg'=>'操作成功','data'=>$data]);
        }
    }
    //推荐商家列表
    public function getstore()
    {


        $campus_id = input('campus_id');
        if(empty($campus_id)){
            return json(['code'=>204,'msg'=>'参数有误']);
        }
        $limit = 10;
        $store = new Store();
        $order = new Orders();
        $page = input('page')?input('page'):1;
        $name =  input('name');
       
        if(!empty($name)){
            $storedata = Db::name('store') ->alias('s')
                ->join('goods g' ,'s.id = g.store_id','left')
                ->field('s.id,s.logo,s.name,s.campus_id,s.min_price,s.delivery_price,s.delivery_name,s.status')
                ->where( 's.name|g.name','like', '%' . $name . '%' )
                ->where('s.campus_id', $campus_id)
                ->where('s.deleted', 0)
                ->where('g.deleted', 0)
                ->order('s.status asc')
                ->group('s.id')
                ->limit($limit)
                ->page($page)
                ->select();
            $storecount = Db::name('store') ->alias('s')
                ->join('goods g' ,'s.id = g.store_id','left')
                ->field('s.id,s.logo,s.name,s.campus_id,s.min_price,s.delivery_price,s.delivery_name,s.status')
                ->where( 's.name|g.name','like', '%' . $name . '%' )
                ->where('s.campus_id', $campus_id)
                ->where('s.deleted', 0)
                ->where('g.deleted', 0)
                ->group('s.id')
                ->count();
            
        }else{
            $storedata = $store
                ->where('campus_id', $campus_id)
                ->where('deleted', 0)
                ->field("id,logo,name,campus_id,min_price,delivery_price,delivery_name,status")
                ->order('status asc')
                ->limit($limit)
                ->page($page)
                ->select();
            $storecount = $store
                ->where('campus_id', $campus_id)
                ->where('deleted', 0)
                ->field("id,logo,name,min_price,delivery_price,delivery_name,status")
                ->order('id asc')
                ->count();
        }
        $now_time = date('H:i:s', time());
        if (!empty($storedata)) {
            foreach ($storedata as &$store_item) {
                //是否营业
                if ($store_item['status'] == 1&&!empty($store_item['start_time1'])) {

                    if ($store_item['start_time1'] < $now_time && $store_item['end_time1'] > $now_time || $store_item['start_time2'] < $now_time && $store_item['end_time2'] > $now_time || $store_item['start_time3'] < $now_time && $store_item['end_time3'] > $now_time) {
                        $store_item['status'] = 1;
                    } else {
                        $store_item['status'] = 2;
                    }
                }

                $store_item['min_price'] = $store_item['min_price'] / 100;
                $store_item['delivery_price'] = $store_item['delivery_price'] / 100;
                //计算订单量
                $store_item['sale'] = $order
                    ->where('store_id', $store_item['id'])
                    ->where('deleted', 0)
                    ->where('status', 7)
                    ->count();
            }
            return json(['code'=>200,'msg'=>'操作成功','data'=>$storedata,'count'=>$storecount]);
         }
         else {
            return json(['code' => 204, 'msg' => '没有数据']);
        }

    }


    //获取所有校区
    public function getcampus(){
        $campus =   new Campus();
        $campusdata =   $campus
            ->where('deleted',0)
            ->field('id campus_id,name,address,lat,lon')
            ->order('sort desc,id asc')
            ->select();
        if(!empty($campusdata)){
            return json(['code'=>200,'msg'=>'操作成功','data'=>$campusdata]);
        }
        else{
            return json(['code'=>204,'msg'=>'操作失败']);
        }
    }
    //通过用户id获取选中的校区id
    public function getcampuid(){
        $user_id    =   input('user_id');
        if(empty($user_id)){
            return json(['code'=>204,'msg'=>'参数有误']);
        }
        $user   =   new User();
        $campusid =   $user
            ->where('id',$user_id)
            ->where('disabled',0)
            ->where('deleted',0)
            ->field('campus_id')
            ->find();

        if(!empty($campusid)){
            $res=Db::name('campus')->where('id',$campusid['campus_id'])->field('id,name')->find();
            $data['campus_id']=$res['id'];
            $data['campus_name']=$res['name'];
            return json(['code'=>200,'msg'=>'操作成功','data'=>$data]);
        }
        else{
            return json(['code'=>204,'msg'=>'操作失败']);
        }
    }
    //通过用户id跟校区id更新用户原来的校区id
    public function updateusercampus(){
        $user_id   = input('user_id');
        if(empty($user_id)){
            return json(['code'=>204,'msg'=>'参数有误']);
        }
        $campus_id = input('campus_id');
        if(empty($campus_id)){
            return json(['code'=>204,'msg'=>'参数有误']);
        }
        $user   =   new User();
        if(!empty($user_id)){
            $userid =   $user
                ->where('id',$user_id)
                ->where('disabled',0)
                ->where('deleted',0)
                ->field('id')
                ->find();
            if(!empty($userid)){
                if(!empty($campus_id)){
                    $updatacampusid =   $user
                        ->where('id',$user_id)
                        ->update(['campus_id'=>$campus_id,'create_time'=>date('Y-m-d H:i:s', time())]);
                    if(!empty($updatacampusid)){

                        return json(['code'=>200,'msg'=>'更新成功','data'=>$updatacampusid]);
                    }
                    else{
                        return json(['code'=>204,'msg'=>'更新失败']);
                    }
                }
            }else{
                return json(['code'=>204,'msg'=>'用户不存在']);
            }
        }else{
            return json(['code'=>204,'msg'=>'用户id为空']);
        }
    }



    //通过code获取openid
    public function getuseropenid()
    {
        //获取到的code
        $code = input('code');
        $user_name   = input('nickname');
        $image      = input('image');

        if(empty($code)||empty($user_name)||empty($image)){
            return json(['code'=>201,'msg'=>'参数有误']);
        }
        //$code='093lw7ll2soUq94nXfnl2ijgzc0lw7ld';
        //获取access_token
        $appid  = 'wx97228d4a1cc79b44';
        $appSecret  ='7b812ddf8aaac046d5ada592257235cb';
        $curl = curl_init();

        curl_setopt($curl, CURLOPT_URL, 'https://api.weixin.qq.com/sns/jscode2session?appid=' . $appid . '&secret=' .  $appSecret  . '&js_code=' . $code . '&grant_type=authorization_code');

        curl_setopt($curl, CURLOPT_RETURNTRANSFER, true);
        curl_setopt($curl, CURLOPT_SSL_VERIFYPEER, 0);//阻止对证书的检查
        curl_setopt($curl, CURLOPT_SSL_VERIFYHOST, 2);
        //获取access_token和openid,转换为数组
        $data = json_decode(curl_exec($curl), true);
        curl_close($curl);
        if(!empty($data['openid'])){
            $openid = $data['openid'];
            $user_info =  Db::name('user')
                ->where('gz_openid',$openid)
                ->where('disabled',0)
                ->where('deleted',0)
                ->field('id,nickname,image')
                ->find();
            if(!empty($user_info)){
                if($user_name!=$user_info['nickname']){
                    Db::name('user')->where('id',$user_info['id'])->update(['nickname'=>$user_name]);
                }
                if($image!=$user_info['image']){
                    Db::name('user')->where('id',$user_info['id'])->update(['image'=>$image]);
                }
                $user_data['user_id']=$user_info['id'];
                return json(['code'=>200,'msg'=>'操作成功','data'=>$user_data]);
            }
            else{
                $user_data['gz_openid']  = $openid;
                $user_data['nickname']   = $user_name;
                $user_data['image']      = $image;
                $user_data['create_time']      = date("Y-m-d H:i:s",time());

                $result = Db::name('user')->insertGetId($user_data);
                $res['user_id']=$result;
                if(!empty($result)){
                    return json(['code'=>200,'msg'=>'操作成功','data'=>$res]);
                }else{
                    return json(['code'=>203,'msg'=>'操作失败']);
                }
            }
        }else{
            return json(['code'=>204,'msg'=>'获取失败']);
        }
    }
    //通过openid获取用户id
   

    //获取特价商品
    public function getgoodsp(){
        $campus_id = input('campus_id');
        if(empty($campus_id)){
            return json(['code'=>204,'msg'=>'参数有误']);
        }
        $goodsp = new GoodsPromotion();
        $now_time = date('Y-m-d H:i:s', time());
        $data   = Db::name('goods_promotion')->alias('g')
            ->join('store s','g.store_id=s.id','left')
            ->where('g.campus_id',$campus_id)
            ->where('g.deleted',0)
            ->where('s.status',1)
            ->where('g.start_time','<=',$now_time)
            ->where('g.end_time','>=',$now_time)
            ->field('g.good_id,g.goodsimage,g.salesprice,g.goodprice,g.goodsname,g.storename,g.start_time,g.end_time,g.store_id')
            ->order('g.sort desc,g.id asc')
            ->limit(6)
            ->select();

        if(!empty($data)) {
            foreach ($data as $key => $val) {
                $data[$key]['salesprice'] = $val['salesprice'] / 100;
                $data[$key]['goodprice'] = $val['goodprice'] / 100;

            }

        }
        if(!empty($data)){
           return json(['code'=>200,'msg'=>'操作成功','data'=>$data]);
        }else{
            return json(['code'=>204,'msg'=>'没有数据','data'=>$data]);
        }

    }
    //获取平台优惠券
    public function getcoupon(){

        $campus_id = input('campus_id');
        $user_id   = input('user_id');
        if(empty($campus_id)){
            return json(['code'=>204,'msg'=>'参数有误']);
        }
        $Coupon = new Coupon();
        $maps = [];
        $maps['start_time'] = ['<',date("Y-m-d H:i:s",time())];
        $maps['end_time'] = ['>',date("Y-m-d H:i:s",time())];
        $maps['status'] = 1;
        $maps['campus_id'] = $campus_id;


        $coupons = $Coupon->where($maps)->field('id,name,discount_money,full_money,start_time,end_time')->select();
        if(!empty($coupons)){
            foreach($coupons as $k =>$v){
                $usercoupon = Db::name('coupon_user')->where('user_id',$user_id)->where('coupon_id',$v['id'])->find();
                if(!empty($usercoupon)){
                    unset($coupons[$k]);
                }
            }
        }

        if(!empty($coupons)){
            return json(['code'=>200,'msg'=>'操作成功','data'=>$coupons]);
        }
        else{
            return json(['code'=>204,'msg'=>'没有数据']);
        }

    }
    // 用户领取优惠券
    public function addcoupon()
    {
        $coupon_id = input('coupon_id');
        $campus_id = input('campus_id');
        if(empty($coupon_id)){
            return json(['code'=>204,'msg'=>'优惠券id参数有误']);
        }
        if(empty($campus_id)){
            return json(['code'=>204,'msg'=>'校区id参数有误']);
        }
        $in_data = [];
        $in_data['user_id'] = input('user_id');
        if(empty($in_data['user_id'])){
            return json(['code'=>204,'msg'=>'参数有误']);



        }
        $in_data['coupon_id'] = $coupon_id;
        $in_data['campus_id'] = $campus_id;
        $in_data['redeem_time'] = date('Y-m-d H:i:s',time());

        $maps = [];
        $maps['user_id'] = $in_data['user_id'];
        $maps['campus_id'] = $in_data['campus_id'];
        $maps['coupon_id'] = $in_data['coupon_id'];
        $maps['is_used'] = 0;
        $coupon = Db::name('coupon_user')->where($maps)->find();
        if($coupon){
            return json(['code'=>204,'msg'=>'已领取，不能重复领取']);
        }

        $res  = Db::name('coupon_user')->insert($in_data);

        if(!empty($res)){
            return json(['code'=>200,'msg'=>'操作成功','data'=>$res]);
        }else{
            return json(['code'=>204,'msg'=>'领取失败']);
        }
    }
}